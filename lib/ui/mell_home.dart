import 'dart:async';
import 'dart:ui';
import 'dart:math'; // –¥–ª—è pow()
import 'package:flutter/material.dart';
import 'widgets/header_card.dart';
import 'widgets/level_card.dart';
import 'widgets/stream_image.dart';
import 'widgets/bottom_tabs.dart';
import 'theme.dart';
import '../utils/audio_manager.dart'; // üîä –∑–≤—É–∫–∏

class MellHome extends StatefulWidget {
  const MellHome({super.key});

  @override
  State<MellHome> createState() => _MellHomeState();
}

class _MellHomeState extends State<MellHome>
    with SingleTickerProviderStateMixin {
  double views = 0; // —Å–µ—Ä–µ–±—Ä–æ
  double silver = 0; // –∑–æ–ª–æ—Ç–æ
  int subs = 0;

  double income = 0; // –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
  double clickIncome = 1; // –¥–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫

  int xp = 0; // —Ç–µ–∫—É—â–∏–π XP –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
  int level = 1;

  int _clickCount = 0;

  bool _showLevelCard = false;
  bool _showLevelGlow = false;

  Timer? _timer;

  late AnimationController _cardController;
  late Animation<double> _scaleAnimation;

  final AudioManager _audio = AudioManager();

  List<Map<String, dynamic>> upgradesData = [
    {
      'name': '–ö–∞–º–µ—Ä–∞',
      'click': 0.05,
      'passive': 0.025,
      'price': 100.0,
      'level': 0
    },
    {
      'name': '–ü–æ–¥—Å—Ç–∞–≤–∫–∞ –ø–æ–¥ –∫–∞–º–µ—Ä—É',
      'click': 0.03,
      'passive': 0.01,
      'price': 50.0,
      'level': 0
    },
    {
      'name': '–ú–∏–∫—Ä–æ—Ñ–æ–Ω',
      'click': 0.04,
      'passive': 0.015,
      'price': 80.0,
      'level': 0
    },
    {
      'name': '–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–µ—Ç–∞',
      'click': 0.06,
      'passive': 0.02,
      'price': 120.0,
      'level': 0
    },
    {
      'name': '–û–¥–µ–∂–¥–∞',
      'click': 0.02,
      'passive': 0.01,
      'price': 40.0,
      'level': 0
    },
    {
      'name': '–ü—Ä–∏—á—ë—Å–∫–∞ –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å',
      'click': 0.03,
      'passive': 0.015,
      'price': 70.0,
      'level': 0
    },
    {
      'name': '–ß–∞—Å—ã',
      'click': 0.01,
      'passive': 0.005,
      'price': 30.0,
      'level': 0
    },
    {
      'name': '–•–∞—Ä–∏–∑–º–∞',
      'click': 0.04,
      'passive': 0.03,
      'price': 150.0,
      'level': 0
    },
    {
      'name': '–ò–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è',
      'click': 0.03,
      'passive': 0.02,
      'price': 130.0,
      'level': 0
    },
    {
      'name': '–≠—Ä—É–¥–∏—Ü–∏—è',
      'click': 0.02,
      'passive': 0.02,
      'price': 110.0,
      'level': 0
    },
    {
      'name': '–û—Å—Ç—Ä–æ—É–º–∏–µ',
      'click': 0.04,
      'passive': 0.02,
      'price': 100.0,
      'level': 0
    },
    {
      'name': '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
      'click': 0.05,
      'passive': 0.03,
      'price': 160.0,
      'level': 0
    },
  ];

  @override
  void initState() {
    super.initState();
    _startIncomeTimer();

    _cardController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 400),
    );

    _scaleAnimation = CurvedAnimation(
      parent: _cardController,
      curve: Curves.easeOutBack,
    );
  }

  void _startIncomeTimer() {
    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      setState(() {
        views += income;
      });
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    _cardController.dispose();
    super.dispose();
  }

  /// –¢—Ä–µ–±—É–µ–º—ã–π XP –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π.
  /// –ü—Ä–∞–≤–∏–ª–∞:
  /// - –î–ª—è level == 1 (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É LevelCard) –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å 100, –Ω–æ
  ///   —Ä–µ–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ 1->2 = 1000.
  /// - –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å 2 —Ç—Ä–µ–±—É–µ—Ç—Å—è 1000 XP.
  /// - –ö–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1.25.
  int requiredXpForLevel(int currentLevel) {
    if (currentLevel <= 1) return 100; // –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å UI
    final double base = 1000.0; // —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ 1 -> 2
    final double value = base * pow(1.05, (currentLevel - 2));
    return value.round();
  }

  // –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å—Ç—Ä–∏–º ‚Äî –¥–∞—ë—Ç XP –∏ –º–æ–∂–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å.
  void _onStreamTap() {
    setState(() {
      views += clickIncome;
      xp += 1; // –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ XP –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
      _clickCount++;

      // –∑–≤—É–∫ –∫–ª–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      _audio.play('sounds/click_sound.mp3');

      if (_clickCount % 1000 == 0) {
        silver += 1;
        // _audio.play('sounds/coin_sound.mp3');
      }

      if (_clickCount % 10 == 0) {
        subs += 1;
      }

      // —Ü–∏–∫–ª –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–≤—ã—à–µ–Ω–∏—è)
      int xpToNextLevel = requiredXpForLevel(level);
      while (xp >= xpToNextLevel) {
        xp -= xpToNextLevel;
        level++;
        _cardController.forward(from: 0);

        // —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
        setState(() => _showLevelGlow = true);
        Future.delayed(const Duration(seconds: 1), () {
          if (mounted) setState(() => _showLevelGlow = false);
        });

        // –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        xpToNextLevel = requiredXpForLevel(level);
      }
    });
  }

  void _toggleLevelCard() {
    setState(() {
      _showLevelCard = !_showLevelCard;
    });
    if (_showLevelCard) _cardController.forward(from: 0);
  }

  void _changeViews(double delta) {
    setState(() {
      views += delta;
      if (views < 0) views = 0;
    });
  }

  void _applyUpgrade(double click, double passive) {
    setState(() {
      clickIncome += click;
      income += passive;
    });
  }

  void _showPurchaseNotification(String upgradeName) {
    final overlayState = Overlay.maybeOf(context);
    if (overlayState == null) return;

    final overlayEntry = OverlayEntry(
      builder: (context) => Positioned(
        top: MediaQuery.of(context).padding.top + 30,
        left: 0,
        right: 0,
        child: Center(
          child: TweenAnimationBuilder<double>(
            duration: const Duration(milliseconds: 400),
            tween: Tween(begin: 0, end: 1),
            curve: Curves.easeOut,
            builder: (context, value, child) {
              return Opacity(opacity: value, child: child);
            },
            child: Container(
              padding:
                  const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              margin: const EdgeInsets.symmetric(horizontal: 40),
              decoration: BoxDecoration(
                color: Colors.greenAccent.shade400.withOpacity(0.95),
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: Colors.greenAccent.withOpacity(0.4),
                    blurRadius: 10,
                    spreadRadius: 1,
                  ),
                ],
              ),
              child: Text(
                '‚úÖ $upgradeName —É–ª—É—á—à–µ–Ω–æ!',
                textAlign: TextAlign.center,
                style: const TextStyle(
                  color: Colors.black,
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
          ),
        ),
      ),
    );

    overlayState.insert(overlayEntry);
    Future.delayed(const Duration(milliseconds: 1500), () {
      overlayEntry.remove();
    });
  }

  void _buyUpgrade(int index) {
    var upgrade = upgradesData[index];
    double price = upgrade['price'];

    if (views >= price) {
      setState(() {
        upgradesData[index]['level']++;
        upgradesData[index]['price'] = price * (1.2 + level * 0.05);
        views -= price;
        clickIncome += upgrade['click'];
        income += upgrade['passive'];
      });
      _showPurchaseNotification(upgrade['name']);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Ä–µ–±—Ä–∞!"),
          backgroundColor: Colors.redAccent.shade200,
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;

    return Scaffold(
      backgroundColor: Colors.black,
      resizeToAvoidBottomInset: true,
      body: Container(
        decoration: getBackgroundForLevel(level),
        child: SafeArea(
          child: Stack(
            alignment: Alignment.center,
            children: [
              if (_showLevelGlow)
                AnimatedOpacity(
                  opacity: _showLevelGlow ? 1 : 0,
                  duration: const Duration(milliseconds: 400),
                  child: Container(
                    decoration: const BoxDecoration(
                      gradient: RadialGradient(
                        colors: [
                          Color(0x80FFFFFF),
                          Colors.transparent,
                        ],
                        radius: 0.8,
                      ),
                    ),
                  ),
                ),

              Column(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Padding(
                    padding: const EdgeInsets.symmetric(
                        horizontal: 18, vertical: 10),
                    child: HeaderCard(
                      views: views,
                      subs: subs,
                      money: silver,
                      income: income,
                      xp: xp,
                      level: level,
                      onAvatarTap: _toggleLevelCard,
                    ),
                  ),

                  Padding(
                    padding: const EdgeInsets.all(18.0),
                    child: BottomTabs(
                      silver: views,
                      onSilverChange: _changeViews,
                      onUpgrade: _applyUpgrade,
                      upgrades: upgradesData,
                      onBuyUpgrade: _buyUpgrade,
                    ),
                  ),
                ],
              ),

              Positioned(
                bottom: screenHeight * 0.06,
                left: 0,
                right: 0,
                child: Center(
                  child: StreamImage(onTap: _onStreamTap),
                ),
              ),

              if (_showLevelCard)
                AnimatedSwitcher(
                  duration: const Duration(milliseconds: 300),
                  child: Stack(
                    key: const ValueKey('overlay'),
                    children: [
                      GestureDetector(
                        onTap: _toggleLevelCard,
                        child: AnimatedOpacity(
                          duration: const Duration(milliseconds: 300),
                          opacity: _showLevelCard ? 1 : 0,
                          child: BackdropFilter(
                            filter: ImageFilter.blur(sigmaX: 6, sigmaY: 6),
                            child: Container(
                              color: Colors.black.withOpacity(0.5),
                            ),
                          ),
                        ),
                      ),
                      Center(
                        child: ScaleTransition(
                          scale: _scaleAnimation,
                          child: LevelCard(level: level, xp: xp),
                        ),
                      ),
                    ],
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}
