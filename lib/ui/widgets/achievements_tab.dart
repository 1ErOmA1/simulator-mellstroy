import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import '../widgets/toast_manager.dart';

class Achievement {
  final String title;
  final String description;
  final String imagePath;
  final bool unlocked;

  const Achievement({
    required this.title,
    required this.description,
    required this.imagePath,
    this.unlocked = false,
  });

  Achievement copyWith({bool? unlocked}) {
    return Achievement(
      title: title,
      description: description,
      imagePath: imagePath,
      unlocked: unlocked ?? this.unlocked,
    );
  }
}

class AchievementsTab extends StatefulWidget {
  final int coins;
  final int gold;
  final int level;
  final int clicks;
  final int upgradesBought;

  const AchievementsTab({
    super.key,
    required this.coins,
    required this.gold,
    required this.level,
    this.clicks = 0,
    this.upgradesBought = 0,
  });

  @override
  State<AchievementsTab> createState() => _AchievementsTabState();
}

class _AchievementsTabState extends State<AchievementsTab> {
  late List<Achievement> achievements;

  @override
  void initState() {
    super.initState();
    achievements = [
      // üí∞ –°–µ—Ä–µ–±—Ä–æ
      const Achievement(
        title: "–ü–µ—Ä–≤—ã–µ 100 –º–æ–Ω–µ—Ç ü™ô",
        description: "–ó–∞—Ä–∞–±–æ—Ç–∞–π 100 —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç",
        imagePath: "assets/images/silver_coin.png",
      ),
      const Achievement(
        title: "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –º–∞—Å—Ç–µ—Ä üíé",
        description: "–ó–∞—Ä–∞–±–æ—Ç–∞–π 10,000 —Å–µ—Ä–µ–±—Ä–∞",
        imagePath: "assets/images/silver_coin.png",
      ),
      const Achievement(
        title: "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä üè¶",
        description: "–ó–∞—Ä–∞–±–æ—Ç–∞–π 1,000,000 —Å–µ—Ä–µ–±—Ä–∞",
        imagePath: "assets/images/silver_coin.png",
      ),

      // üü° –ó–æ–ª–æ—Ç–æ
      const Achievement(
        title: "–ó–æ–ª–æ—Ç–æ–π —Å—Ç–∞—Ä—Ç üèÖ",
        description: "–ü–æ–ª—É—á–∏—Ç—å 1 –∑–æ–ª–æ—Ç—É—é –º–æ–Ω–µ—Ç—É",
        imagePath: "assets/images/gold_coin.png",
      ),
      const Achievement(
        title: "–ó–æ–ª–æ—Ç–æ–π –º–∏–ª–ª–∏–æ–Ω–µ—Ä üëë",
        description: "–ü–æ–ª—É—á–∏—Ç—å 10 –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç",
        imagePath: "assets/images/gold_coin.png",
      ),

      // üß† –£—Ä–æ–≤–µ–Ω—å
      const Achievement(
        title: "–ü—É—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–∞ üöÄ",
        description: "–î–æ—Å—Ç–∏–≥–Ω–∏ 5 —É—Ä–æ–≤–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏",
        imagePath: "assets/images/level_up.png",
      ),
      const Achievement(
        title: "–õ–µ–≥–µ–Ω–¥–∞ —ç—Ñ–∏—Ä–∞ üåü",
        description: "–î–æ—Å—Ç–∏–≥–Ω–∏ 20 —É—Ä–æ–≤–Ω—è",
        imagePath: "assets/images/level_up.png",
      ),
      const Achievement(
        title: "–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π —Å—Ç—Ä–∏–º–µ—Ä üî•",
        description: "–î–æ—Å—Ç–∏–≥–Ω–∏ 50 —É—Ä–æ–≤–Ω—è",
        imagePath: "assets/images/level_up.png",
      ),

      // üñ±Ô∏è –ö–ª–∏–∫–∏
      const Achievement(
        title: "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ üëÜ",
        description: "–°–¥–µ–ª–∞–π 100 –∫–ª–∏–∫–æ–≤",
        imagePath: "assets/images/tap_icon.png",
      ),
      const Achievement(
        title: "–§–∞–Ω–∞—Ç –∫–ª–∏–∫–æ–≤ ‚ö°",
        description: "–°–¥–µ–ª–∞–π 10,000 –∫–ª–∏–∫–æ–≤",
        imagePath: "assets/images/tap_icon.png",
      ),
      const Achievement(
        title: "–¶–∞—Ä—å –∫–ª–∏–∫–æ–≤ üí•",
        description: "–°–¥–µ–ª–∞–π 1,000,000 –∫–ª–∏–∫–æ–≤",
        imagePath: "assets/images/tap_icon.png",
      ),

      // üß© –£–ª—É—á—à–µ–Ω–∏—è
      const Achievement(
        title: "–ü–µ—Ä–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ üîß",
        description: "–ö—É–ø–∏ –æ–¥–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ",
        imagePath: "assets/images/upgrade_icon.png",
      ),
      const Achievement(
        title: "–ò–Ω–∂–µ–Ω–µ—Ä —É—Å–ø–µ—Ö–∞ ‚öôÔ∏è",
        description: "–ö—É–ø–∏ 10 —É–ª—É—á—à–µ–Ω–∏–π",
        imagePath: "assets/images/upgrade_icon.png",
      ),
      const Achievement(
        title: "–ì–µ–Ω–∏–π –∞–ø–≥—Ä–µ–π–¥–æ–≤ üß†",
        description: "–ö—É–ø–∏ 100 —É–ª—É—á—à–µ–Ω–∏–π",
        imagePath: "assets/images/upgrade_icon.png",
      ),

      // üåç –û—Å–æ–±–æ–µ
      const Achievement(
        title: "–í–µ—Ç–µ—Ä–∞–Ω —Å—Ç—Ä–∏–º–æ–≤ üé•",
        description: "–ü—Ä–æ–≤–µ–¥–∏ —Ç—ã—Å—è—á–∏ —ç—Ñ–∏—Ä–æ–≤ –∏ –Ω–µ —Å–¥–∞–π—Å—è!",
        imagePath: "assets/images/stream_icon.png",
      ),
    ];
  }

  @override
  Widget build(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _checkAchievements(context);
    });

    return achievements.isEmpty
        ? Center(
            child: Text(
              '–ê—á–∏–≤–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ü•á',
              style: GoogleFonts.poppins(
                color: Colors.white70,
                fontSize: 14,
              ),
            ),
          )
        : ListView.builder(
            padding: const EdgeInsets.all(16),
            itemCount: achievements.length,
            itemBuilder: (context, index) {
              final a = achievements[index];
              return AnimatedContainer(
                duration: const Duration(milliseconds: 400),
                curve: Curves.easeInOut,
                margin: const EdgeInsets.only(bottom: 12),
                padding: const EdgeInsets.all(14),
                decoration: BoxDecoration(
                  color:
                      a.unlocked ? Colors.green.withOpacity(0.1) : Colors.white10,
                  borderRadius: BorderRadius.circular(14),
                  border: Border.all(
                    color: a.unlocked ? Colors.greenAccent : Colors.white24,
                    width: 1,
                  ),
                  boxShadow: a.unlocked
                      ? [
                          BoxShadow(
                            color: Colors.greenAccent.withOpacity(0.25),
                            blurRadius: 10,
                            spreadRadius: 1,
                          ),
                        ]
                      : [],
                ),
                child: Row(
                  children: [
                    Image.asset(
                      a.imagePath,
                      width: 36,
                      height: 36,
                      errorBuilder: (_, __, ___) => const Icon(
                        Icons.emoji_events,
                        color: Colors.white54,
                        size: 32,
                      ),
                    ),
                    const SizedBox(width: 14),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            a.title,
                            style: GoogleFonts.poppins(
                              color: Colors.white,
                              fontWeight: FontWeight.w600,
                              fontSize: 14,
                            ),
                          ),
                          Text(
                            a.description,
                            style: GoogleFonts.poppins(
                              color: Colors.white54,
                              fontSize: 12,
                            ),
                          ),
                        ],
                      ),
                    ),
                    Icon(
                      a.unlocked ? Icons.check_circle : Icons.lock,
                      color:
                          a.unlocked ? Colors.greenAccent : Colors.white24,
                    ),
                  ],
                ),
              );
            },
          );
  }

  void _checkAchievements(BuildContext context) {
    for (int i = 0; i < achievements.length; i++) {
      final a = achievements[i];
      if (!a.unlocked) {
        final c = widget.coins;
        final g = widget.gold;
        final l = widget.level;
        final clicks = widget.clicks;
        final upgrades = widget.upgradesBought;

        if (a.title.contains("100 –º–æ–Ω–µ—Ç") && c >= 100) {
          _unlock(i, context);
        } else if (a.title.contains("–º–∞—Å—Ç–µ—Ä") && c >= 10000) {
          _unlock(i, context);
        } else if (a.title.contains("–º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä") && c >= 1000000) {
          _unlock(i, context);
        } else if (a.title.contains("–ó–æ–ª–æ—Ç–æ–π —Å—Ç–∞—Ä—Ç") && g >= 1) {
          _unlock(i, context);
        } else if (a.title.contains("–º–∏–ª–ª–∏–æ–Ω–µ—Ä") && g >= 10) {
          _unlock(i, context);
        } else if (a.title.contains("—Å—Ç—Ä–∏–º–µ—Ä–∞") && l >= 5) {
          _unlock(i, context);
        } else if (a.title.contains("–õ–µ–≥–µ–Ω–¥–∞") && l >= 20) {
          _unlock(i, context);
        } else if (a.title.contains("–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π") && l >= 50) {
          _unlock(i, context);
        } else if (a.title.contains("–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏") && clicks >= 100) {
          _unlock(i, context);
        } else if (a.title.contains("–§–∞–Ω–∞—Ç –∫–ª–∏–∫–æ–≤") && clicks >= 10000) {
          _unlock(i, context);
        } else if (a.title.contains("–¶–∞—Ä—å –∫–ª–∏–∫–æ–≤") && clicks >= 1000000) {
          _unlock(i, context);
        } else if (a.title.contains("–ü–µ—Ä–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ") && upgrades >= 1) {
          _unlock(i, context);
        } else if (a.title.contains("–ò–Ω–∂–µ–Ω–µ—Ä") && upgrades >= 10) {
          _unlock(i, context);
        } else if (a.title.contains("–ì–µ–Ω–∏–π") && upgrades >= 100) {
          _unlock(i, context);
        } else if (a.title.contains("–í–µ—Ç–µ—Ä–∞–Ω") && (clicks >= 100000 && l >= 30)) {
          _unlock(i, context);
        }
      }
    }
  }

  void _unlock(int i, BuildContext context) {
    setState(() {
      achievements[i] = achievements[i].copyWith(unlocked: true);
    });

    ToastManager().showToast(
      context,
      'üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievements[i].title}',
      icon: Icons.emoji_events_rounded,
      color: Colors.greenAccent,
    );
  }
}
