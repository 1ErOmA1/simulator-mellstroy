import 'dart:math';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class LevelCard extends StatelessWidget {
  final int level;
  final int xp;

  const LevelCard({
    super.key,
    required this.level,
    required this.xp,
  });

  // üéñÔ∏è –ù–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
  String _getLevelTitle(int level) {
    const titles = [
      "–ù–æ–≤–∏—á–æ–∫", "–õ—é–±–∏—Ç–µ–ª—å", "–°—Ç—Ä–∏–º–µ—Ä-—É—á–µ–Ω–∏–∫", "–í —ç—Ñ–∏—Ä–µ!", "–ü–µ—Ä–≤—ã–µ —Ñ–∞–Ω–∞—Ç—ã",
      "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π", "–ò–∑–≤–µ—Å—Ç–Ω—ã–π", "–í —Ç—Ä–µ–Ω–¥–∞—Ö", "–ú–∞—Å—Ç–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "–ü—Ä–æ—Ñ–∏",
      "–ì—É—Ä—É —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π", "–ú–∞–≥ —Å—Ç—Ä–∏–º–æ–≤", "–ö–æ—Ä–æ–ª—å —ç—Ñ–∏—Ä–∞", "–õ–µ–≥–µ–Ω–¥–∞ Twitch",
      "–ú–∏—Ä–æ–≤–∞—è –∑–≤–µ–∑–¥–∞", "–ö–∏–±–µ—Ä-–∏–¥–æ–ª", "–°–µ–Ω—Å–∞—Ü–∏—è —Å–µ—Ç–∏", "–°—É–ø–µ—Ä–∑–≤–µ–∑–¥–∞",
      "–ò–∫–æ–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π —Å—Ç—Ä–∏–º–µ—Ä",
      // ... –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    ];

    if (level >= 1 && level <= titles.length) return titles[level - 1];
    return "–õ–µ–≥–µ–Ω–¥–∞";
  }

  /// –¢—Ä–µ–±—É–µ–º—ã–π XP –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π.
  /// –ü—Ä–∞–≤–∏–ª–∞:
  /// - –î–ª—è level == 1 (–ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 100 XP (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å UI).
  /// - –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å 2 —Ç—Ä–µ–±—É–µ—Ç—Å—è 1000 XP.
  /// - –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1.25 (25% —Ä–æ—Å—Ç).
  int requiredXpForLevel(int level) {
    if (level <= 1) return 100; // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–ª—è —É—Ä–æ–≤–Ω—è 1: 100 XP
    final double base = 1000.0; // —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ 1 -> 2
    final double value = base * pow(1.05, (level - 2));
    return value.round();
  }

  @override
  Widget build(BuildContext context) {
    final int maxXp = requiredXpForLevel(level);
    final double progress = (xp / maxXp).clamp(0.0, 1.0);

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 18),
      margin: const EdgeInsets.symmetric(horizontal: 24),
      decoration: BoxDecoration(
        color: const Color(0xFF3B1F2A),
        borderRadius: BorderRadius.circular(18),
        border: Border.all(color: Colors.white.withOpacity(0.08)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          const Icon(Icons.emoji_events, color: Color(0xFFFFD36A), size: 40),
          const SizedBox(height: 10),

          Text(
            '–£—Ä–æ–≤–µ–Ω—å $level',
            style: GoogleFonts.poppins(
              color: Colors.white,
              fontWeight: FontWeight.w700,
              fontSize: 20,
            ),
          ),

          const SizedBox(height: 6),

          // üèÖ –∑–≤–∞–Ω–∏–µ
          Text(
            _getLevelTitle(level),
            style: GoogleFonts.poppins(
              color: Colors.white70,
              fontWeight: FontWeight.w500,
              fontSize: 14,
            ),
          ),

          const SizedBox(height: 14),

          // üìä –ø–ª–∞–≤–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å XP
          TweenAnimationBuilder<double>(
            tween: Tween<double>(begin: 0, end: progress),
            duration: const Duration(milliseconds: 500),
            curve: Curves.easeOutCubic,
            builder: (context, value, _) {
              return Stack(
                children: [
                  Container(
                    height: 10,
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(10),
                    ),
                  ),
                  FractionallySizedBox(
                    widthFactor: value,
                    child: Container(
                      height: 10,
                      decoration: BoxDecoration(
                        gradient: const LinearGradient(
                          colors: [Color(0xFFFFD36A), Color(0xFFF8A435)],
                        ),
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                  ),
                ],
              );
            },
          ),

          const SizedBox(height: 6),

          Text(
            '$xp / $maxXp XP',
            style: GoogleFonts.poppins(
              color: Colors.white70,
              fontSize: 13,
            ),
          ),
        ],
      ),
    );
  }
}
